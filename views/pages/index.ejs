<!DOCTYPE html>
<html lang="en">
<head>
    <% include ../partials/head %>
    <script src="//code.jquery.com/jquery-2.1.1.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <style>
       #progressBar {
width: 924px;
height: 6px;
background-color: #444444;
display: inline-block;
margin-top: 1px;
}

#progressBar div {
height: 100%;
width: 0;
background-color: red;
}
    </style>
</head>
<body class="container">

<header>
    <% include ../partials/header %>
</header>

<main>


    <!DOCTYPE html>
    <html>
    
    <body>
    <div class="now_playing">
     
      <div class="n_p_video_container">
           
        <div class="n_p_video_play"></div>
       
        <div id="ytplayer"></div>
           
      </div>
     
     
      <div class="n_p_video_progressbar">
        <span onclick="onPlayerReady()" class="glyphicon glyphicon-play"></span>
        <span  onclick="onPause()" class="glyphicon glyphicon-pause"></span>
            <div id="progressBar"><div>
       
              </div>
     
    </div>
    
   

<script>


  var socket = io.connect('http://localhost:3000');
  socket.on('news', function (data) {
    console.log(data);
    socket.emit('my other event', { my: 'data' });
  });

    function progress(percent, $element) {
  var progressBarWidth = percent * $element.width() / 100;

// $element.find('div').animate({ width: progressBarWidth }, 500).html(percent + "%&nbsp;");

  $element.find('div').animate({ width: progressBarWidth });
}

var tag = document.createElement('script');

tag.src = "https://www.youtube.com/iframe_api";
var firstScriptTag = document.getElementsByTagName('script')[0];
firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

// 3. This function creates an <iframe> (and YouTube player)
//    after the API code downloads.
var player;

function onYouTubeIframeAPIReady() {
    player = new YT.Player('ytplayer', {
      height: '540',
      width: '960',
      videoId: 'UDxzMcCrOyI',
        playerVars: {
        'controls' : 0,
        'modestbranding' : 1,
        'rel' : 0,
        'showinfo' : 0
      },
        events: {
            'onReady': onPlayerReady,
             'onStateChange': onPlayerStateChange
        }
    });
    console.log(player);
}

// 4. The API will call this function when the video player is ready.
function onPlayerReady() {
    player.playVideo();
}
function onPause(){
    player.pauseVideo();
}

// 5. The API calls this function when the player's state changes.
//    The function indicates that when playing a video (state=1),
//    the player should play for six seconds and then stop.

function onPlayerStateChange(event) {
    if (event.data == YT.PlayerState.PLAYING) {

      
      var playerTotalTime = player.getDuration();

      mytimer = setInterval(function() {
        var playerCurrentTime = player.getCurrentTime();

        var playerTimeDifference = (playerCurrentTime / playerTotalTime) * 100;


        progress(playerTimeDifference, $('#progressBar'));
      }, 1000);        
    } else {
      
      clearTimeout(mytimer);
      
    }
}

$("#progressBar").click(function(e) {
    var $this = $(this);

    // to get part of width of progress bar clicked
    var widthclicked = e.pageX - $this.offset().left;
    var totalWidth = $this.width(); // can also be cached somewhere in the app if it doesn't change

    // do calculation of the seconds clicked
    var calc = (widthclicked / totalWidth * player.getDuration()); // get the percent of bar clicked and multiply in by the duration
    var calc_fix = calc.toFixed(0);
    var time = convert_time(calc_fix);


    player.seekTo(calc_fix);
    $('#prprogressBar').find('div').animate({ width: calc });
    
});

function convert_time(seconds) {
    var s = seconds,
    h = Math.floor(s/3600);
    s -= h*3600;
    var m = Math.floor(s/60);
    s -= m*60;

    if(seconds >= "3600") {
        return "0" + h + ":" + (m < 10 ? "0" + m : m) + ":" + (s < 10 ? "0" + s : s);
    } else {
        return (m < 10 ? "0" + m : m) + ":" + (s < 10 ? "0" + s : s);
    }
}



function stopVideo() {
    player.stopVideo();
}
</script>
</main>

<footer>
    <% include ../partials/footer %>
</footer>

</body>
</html>